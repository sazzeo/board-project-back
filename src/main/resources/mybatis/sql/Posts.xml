<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jy.board.posts.dao.PostsRepository">

    <select id="selectPost" resultMap="postsAndTags2" resultType="postsDto">
        SELECT POSTS.POSTS_SEQ,
               POSTS.CATEGORY_SEQ,
               POSTS.ID,
               POSTS.TITLE,
               POSTS.CONTENT,
               POSTS.VIEWS,
               POSTS.LIKE_CNT,
               POSTS.REG_DATE,
               TAGS.TAG_SEQ,
               TAGS.TAG_NAME
        FROM (SELECT POSTS.*
              FROM POSTS
              WHERE POSTS_SEQ = #{postsSeq}) POSTS
                 LEFT JOIN TAGS
                           USING (POSTS_SEQ)
    </select>

    <select id="selectPostsOfChildCategory" resultMap="postsAndTags2" resultType="postsDto">
        SELECT POSTS.POSTS_SEQ,
               POSTS.CATEGORY_SEQ,
               POSTS.ID,
               POSTS.TITLE,
               POSTS.CONTENT,
               POSTS.VIEWS,
               POSTS.LIKE_CNT,
               POSTS.REG_DATE,
               TAGS.tag_seq,
               TAGS.TAG_NAME
        FROM (SELECT *
              FROM POSTS
              WHERE
                      CATEGORY_SEQ = (SELECT CATEGORY_SEQ FROM CATEGORY WHERE TITLE = #{title} and BLOG_SEQ = (SELECT BLOG_SEQ FROM BLOG WHERE ID = #{id}))) POSTS
                 LEFT JOIN TAGS TAGS
                           USING (POSTS_SEQ)
        ORDER BY POSTS_SEQ DESC, TAG_SEQ
    </select>

    <select id="selectPostsOfParentCategory" resultMap="postsAndTags2" resultType="postsDto">
        WITH CATE AS
                 (SELECT *
                  FROM CATEGORY
                  WHERE BLOG_SEQ = (SELECT BLOG_SEQ FROM BLOG WHERE ID = #{id})),
             JOIN_CATE AS
                 (SELECT PARENT.CATEGORY_SEQ PARENT_SEQ, CHILD.CATEGORY_SEQ CHILD_SEQ
                  FROM CATE PARENT
                           LEFT JOIN CATE CHILD
                                     ON (CHILD.UP_CATEGORY = PARENT.CATEGORY_SEQ)
                  WHERE PARENT.TITLE = #{title}),
             FINAL_CATE AS (SELECT *
                            FROM POSTS
                            WHERE CATEGORY_SEQ IN (SELECT PARENT_SEQ FROM JOIN_CATE)
                               OR CATEGORY_SEQ IN (SELECT CHILD_SEQ FROM JOIN_CATE))
        SELECT (select count(posts_seq) from FINAL_CATE POSTS) TOTAL_ELEMENTS, --7/27 추가 된 메소드
               POSTS.POSTS_SEQ,
               POSTS.CATEGORY_SEQ,
               POSTS.ID,
               POSTS.TITLE,
               POSTS.CONTENT,
               POSTS.VIEWS,
               POSTS.LIKE_CNT,
               POSTS.REG_DATE,
               TAGS.tag_seq,
               TAGS.TAG_NAME
        FROM FINAL_CATE POSTS
                 LEFT JOIN TAGS
                           USING (POSTS_SEQ)
        ORDER BY POSTS_SEQ DESC, TAG_SEQ
    </select>

    <select id="selectAllPost" resultMap="postsAndTags">
        SELECT *
        FROM (SELECT *
              FROM POSTS
              WHERE ID = #{id}) POSTS
                 LEFT JOIN TAGS
                           USING (POSTS_SEQ)
        ORDER BY POSTS_SEQ DESC, TAG_SEQ
    </select>


    <insert id="insertPost" parameterType="postsDto">
        INSERT INTO POSTS(CATEGORY_SEQ , TITLE, CONTENT , ID)
        VALUES(#{categorySeq} , #{title} , #{content} , #{id})
        <selectKey keyProperty="postsSeq" resultType="long" order="AFTER">
            select currval('POSTS_SEQ')
        </selectKey>
    </insert>

    <insert id="insertTag" parameterType="tagsDto">
        INSERT INTO TAGS(POSTS_SEQ, TAG_NAME)
        VALUES (#{postsSeq}, #{tagName})
    </insert>

    <update id="updatePost" parameterType="postsDto">
        UPDATE POSTS
        SET TITLE   = #{title}
          , CONTENT = #{content}
        WHERE POSTS_SEQ = #{postsSeq}
    </update>

    <update id="updatePostsViews" parameterType="long">
        UPDATE POSTS
        SET VIEWS = VIEWS + 1
        WHERE POSTS_SEQ = #{postsSeq}
    </update>

    <select id="selectTagsBySeq" parameterType="long" resultType="tagsDto">
        SELECT TAG_NAME
        FROM TAGS
        where POSTS_SEQ = #{postsSeq}
        order by TAG_SEQ;
    </select>

    <select id="selectTagsBySeqList" parameterType="list" resultType="tagsDto">
        SELECT POSTS_SEQ ,TAG_NAME
        FROM TAGS
        where POSTS_SEQ in
        <foreach collection="seqList" item="seq" index="index" separator="," open="(" close=")">
            #{seq}
        </foreach>
        order by TAG_SEQ;
    </select>

    <!--    카운트 있는 버전-->
    <resultMap type="map" id="postsAndTags">
        <id property="postsSeq" column="POSTS_SEQ"/>
        <result property="title" column="TITLE"/>
        <result property="content" column="CONTENT"/>
        <result property="id" column="ID"/>
        <result property="regDate" column="REG_DATE"/>
        <result property="views" column="VIEWS"/>
        <result property="count" column="COUNT"/>
        <collection property="tagList" ofType="map" javaType="list">
            <id property="tagSeq" column="TAG_SEQ"/>
            <result property="tagName" column="TAG_NAME"/>
        </collection>
    </resultMap>
    <!--카운트 없는버전-->
    <resultMap type="postsDto" id="postsAndTags2">
        <id property="postsSeq" column="POSTS_SEQ"/>
        <result property="title" column="TITLE"/>
        <result property="content" column="CONTENT"/>
        <result property="id" column="ID"/>
        <result property="regDate" column="REG_DATE"/>
        <result property="views" column="VIEWS"/>
        <!--        <result property="count" column="COUNT"/>-->
        <collection property="tagList" ofType="tagsDto">
            <id property="tagSeq" column="TAG_SEQ"/>
            <result property="tagName" column="TAG_NAME"/>
        </collection>
    </resultMap>


    <sql id="postsColumn">
        POSTS
        .
        POSTS_SEQ
        ,
        POSTS.TITLE ,
        SUBSTR(POSTS.CONTENT , 1, 80) AS CONTENT,
        POSTS.MEMBER ,
        POSTS.REG_DATE ,
        POSTS.VIEWS
        --(SELECT COUNT(*) FROM POSTS) AS COUNT
    </sql>

    <select id="selectPosts" resultMap="postsAndTags" resultType="map">
        <include refid="Pagination.pagingHeader"/>
        <include refid="postsColumn"/>,
        TAGS.TAG_SEQ ,
        (SELECT COUNT(*) FROM POSTS) AS COUNT , --count * 빼기!!!!
        TAGS.TAG_NAME
        FROM POSTS
        LEFT JOIN TAGS
        USING (POSTS_SEQ)) POSTS
        <include refid="Pagination.pagingFooter"/>
        ORDER BY ROWNUM , TAG_SEQ
    </select>


    <select id="selectPostsAsOption" resultMap="postsAndTags" resultType="map">
        <include refid="Pagination.pagingHeader"/>
        POSTS.* ,
        TAGS.TAG_SEQ ,
        TAGS.TAG_NAME
        FROM (SELECT POSTS.* , COUNT(POSTS_SEQ) OVER() COUNT
        FROM POSTS
        <where>
            <if test="o == '제목' or o=='전체'">
                and TITLE LIKE '%' || #{s} || '%'
            </if>
            <if test="o == '내용' or o=='전체' ">
                and CONTENT LIKE '%' || #{s} || '%'
            </if>
            <if test="o == '작성자' or o=='전체' ">
                and MEMBER LIKE '%' || #{s} || '%'
            </if>
            <if test="o == '태그' or o=='전체' ">
                and POSTS_SEQ IN (
                SELECT POSTS_SEQ FROM tags
                WHERE TAG_NAME LIKE #{s}
                )
            </if>
        </where>
        ) POSTS
        LEFT JOIN TAGS
        USING (POSTS_SEQ)
        ) POSTS
        WHERE ROWNUM BETWEEN #{pageable.start} AND #{pageable.end} --임시
        ORDER BY ROWNUM , TAG_SEQ
    </select>


    <select id="selectTagsOrderByTop" resultType="tagsDto">
        SELECT TAG_NAME, COUNT(TAG_NAME) COUNT
        FROM TAGS
        WHERE POSTS_SEQ IN (SELECT POSTS_SEQ FROM POSTS
            WHERE ID = #{id})
        GROUP BY TAG_NAME
        HAVING COUNT (TAG_NAME) >= #{tagMin}
        ORDER BY COUNT DESC , TAG_NAME
            LIMIT #{tagCardinal}
    </select>

    <select id="selectPostsByTagName" resultMap="postsAndTags2" resultType="postsDto">
        SELECT POSTS.*, TAGS.TAG_SEQ, TAGS.TAG_NAME
        FROM (SELECT POSTS_SEQ, CATEGORY_SEQ, ID, TITLE, CONTENT, VIEWS, LIKE_CNT FROM POSTS WHERE ID = #{id}) POSTS
                 LEFT JOIN TAGS
                           USING (POSTS_SEQ)
        WHERE POSTS_SEQ IN (SELECT POSTS_SEQ FROM TAGS WHERE TAG_NAME = #{tagName})
    </select>

    <!--    게시글 삭제-->
    <delete id="deletePostsBySeq">
        DELETE
        FROM POSTS
        WHERE POSTS_SEQ = #{postsSeq}
    </delete>

    <!--    게시글 삭제시 태그도 삭제-->
    <delete id="deleteTagsByPostsSeq">
        DELETE
        FROM TAGS
        WHERE POSTS_SEQ = #{postsSeq}
    </delete>

    <!--    태그 단건 삭제-->
    <delete id="deleteTagsBySeqList">
        DELETE
        FROM TAGS
        WHERE TAG_SEQ IN
        <foreach collection="list" item="tagSeq" index="index" separator="," open="(" close=")">
            #{tagSeq}
        </foreach>
    </delete>

</mapper>